version: "3.9"
services:
  traefik:
    image: traefik:v2.9
    command:
      - '--entrypoints.web.address=:80'
#      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
      - '--entrypoints.websecure.address=:443'
      - '--entrypoints.websecure.http.tls=true'
      - '--entrypoints.websecure.http.tls.certresolver=le'
      - '--providers.docker'
      - '--providers.docker.exposedByDefault=true'
      - '--api'
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"  # Используйте тестовый сервер
      
      # - '--entrypoints.websecure.http.tls.certificates.certFile=/certs/certificate.crt'
      # - '--entrypoints.websecure.http.tls.certificates.keyFile=/certs/private.key'

    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme:/acme
      - ./certs:/certs  # Монтируем директорию с сертификатами
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.entrypoints=web,websecure

      # Enable CORS headers
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"


  portainer:
    image: portainer/portainer-ce
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.services.portainer.loadbalancer.server.port=9000"  
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"  
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    ports:
      - 9000:9000

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis.rule=Host(`redis.${DOMAIN}`)"  # Замените на ваш домен
      - "traefik.http.services.redis.loadbalancer.server.port=6379"  

  postgres_exporter:

    container_name: exporter_container
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_URI: "postgres:5432/${POSTGRES_DB}?sslmode=disable"
      DATA_SOURCE_USER: ${DATA_SOURCE_USER}
      DATA_SOURCE_PASS: ${DATA_SOURCE_PASS}
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 500M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres_exporter.rule=Host(`postgres-exporter.${DOMAIN}`)"  # Замените на ваш домен
      - "traefik.http.services.postgres_exporter.loadbalancer.server.port=9187"  

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ../DatabasePOSTGRE:/docker-entrypoint-initdb.d
      - habrdb-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgres.${DOMAIN}`)"  # Замените на ваш домен
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"  


  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.routers.pgadmin.entrypoints=websecure"
      # - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"
      # - "traefik.http.services.pgadmin.loadbalancer.server.port=5050" 
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80" 

    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL} 
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ../pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    expose:
      - "80" # Указывает, что контейнер слушает на порту 80
  # bash:
    # ports:
    #   - 5050:80

  telegram_connect:
    image: telegram_connect
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.telegram_connect.rule=Host(`telegram.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.routers.telegram_connect.entrypoints=websecure"
      # - "traefik.http.routers.telegram_connect.tls.certresolver=myresolver"
      - "traefik.http.services.telegram_connect.loadbalancer.server.port=${PORT_TELEGRAM_CONNECT}"
    volumes:
      - ./new_signal/telegramConnect:/app
    restart: unless-stopped
    build:
      context: ./new_signal/telegramConnect
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - PORT_TELEGRAM_CONNECT=${PORT_TELEGRAM_CONNECT}
      - TOKEN_BOT=${TOKEN_BOT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HANDLER_MESSAGE_URL=${HANDLER_MESSAGE_URL}:${PORT_HANDLER_MESSAGE}
    depends_on:
      - postgres
    ports:
      - ${PORT_TELEGRAM_CONNECT}:${PORT_TELEGRAM_CONNECT}

  handler_message:
    image: handler_message
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.handler_message.rule=Host(`handler.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.routers.handler_message.entrypoints=websecure"
      # - "traefik.http.routers.handler_message.tls.certresolver=myresolver"
      - "traefik.http.services.handler_message.loadbalancer.server.port=${PORT_HANDLER_MESSAGE}"
    volumes:
      - ./new_signal/handlerMessage:/app
    restart: unless-stopped
    build:
      context: ./new_signal/handlerMessage
    environment:
      - REDIS_URL=${REDIS_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - SENDER_MESSAGE_URL=${SENDER_MESSAGE_URL}:${PORT_SENDER_MESSAGE}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
      - PORT_HANDLER_MESSAGE=${PORT_HANDLER_MESSAGE}
    ports:
      - ${PORT_HANDLER_MESSAGE}:${PORT_HANDLER_MESSAGE}

  generate_answer:
    image: generate_answer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.generate_answer.rule=Host(`generate.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.routers.generate_answer.entrypoints=websecure"
      # - "traefik.http.routers.generate_answer.tls.certresolver=myresolver"
      - "traefik.http.services.generate_answer.loadbalancer.server.port=${PORT_GENERATE_ANSWER}"
    volumes:
      - ./new_signal/generateAnswer:/app
    restart: unless-stopped
    build:
      context: ./new_signal/generateAnswer
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VECTOR_DB_WORK_URL=${VECTOR_DB_WORK_URL}:${PORT_VECTOR_DB_WORK}
      - PORT_GENERATE_ANSWER=${PORT_GENERATE_ANSWER}
      - HANDLER_MESSAGE_URL=${HANDLER_MESSAGE_URL}:${PORT_HANDLER_MESSAGE}
    ports:

      - ${PORT_GENERATE_ANSWER}:${PORT_GENERATE_ANSWER}


  sender_message:
    image: sender_message
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sender_message.rule=Host(`sender.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.routers.sender_message.entrypoints=websecure"
      # - "traefik.http.routers.sender_message.tls.certresolver=myresolver"
      - "traefik.http.services.sender_message.loadbalancer.server.port=${PORT_SENDER_MESSAGE}"
    volumes:
      - ./new_signal/senderMessage:/app
    restart: unless-stopped
    build:
      context: ./new_signal/senderMessage
    environment:
      - TOKEN_BOT=${TOKEN_BOT}  # telegram
      - PORT_SENDER_MESSAGE=${PORT_SENDER_MESSAGE}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
    ports:
      - ${PORT_SENDER_MESSAGE}:${PORT_SENDER_MESSAGE}
  
  vector_db_work:
    image: vector_db_work
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vector_db_work.rule=Host(`vector.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.routers.vector_db_work.entrypoints=websecure"
      # - "traefik.http.routers.vector_db_work.tls.certresolver=myresolver"
      - "traefik.http.services.vector_db_work.loadbalancer.server.port=${PORT_VECTOR_DB_WORK}"
    volumes:
      - ./new_signal/vectorDBwork:/app
    restart: unless-stopped
    build:
      context: ./new_signal/vectorDBwork
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=${POSTGRES_URL}
      - PORT_VECTOR_DB_WORK=${PORT_VECTOR_DB_WORK}
    ports:
      - ${PORT_VECTOR_DB_WORK}:${PORT_VECTOR_DB_WORK}

  vizualize_audio:
    image: vizualize_audio
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vizualize_audio.rule=Host(`vizualize-audio.${DOMAIN}`)"  # Замените на ваш домен
      # - "traefik.http.services.vizualize_audio.loadbalancer.server.port=${PORT_VIZUALIZE_AUDIO}"
      - "traefik.http.services.vizualize_audio.loadbalancer.server.port=80"
    security_opt:
      - no-new-privileges:true
    volumes:
      - ../stepinus.github.io:/app
    restart: unless-stopped
    build:
      context: ../stepinus.github.io
    environment:
      # - POSTGRES_DB=${POSTGRES_DB}
      # - POSTGRES_USER=${POSTGRES_USER}
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # - POSTGRES_URL=${POSTGRES_URL}
      # - PORT_VECTOR_DB_WORK=${PORT_VECTOR_DB_WORK}
      - GENERATE_ANSWER_URL=${GENERATE_ANSWER_URL}:${PORT_GENERATE_ANSWER}
    # ports:
    #   - ${PORT_VIZUALIZE_AUDIO}:${PORT_VIZUALIZE_AUDIO}
    expose:
      - "80" # Указывает, что контейнер слушает на порту 80
  # bash:
  #   image: bash
  #   restart: unless-stopped
  #   tty: true

volumes:
  habrdb-data:
  portainer_data: